var AccurateAppend;
(function (AccurateAppend) {
    var DyanmicAppend;
    (function (DyanmicAppend) {
        var BuildManifest;
        (function (BuildManifest) {
            var Manifest = AccurateAppend.DynamicAppend.Manifest;
            var OperationName = AccurateAppend.DynamicAppend.OperationName;
            var ViewModel = (function () {
                function ViewModel() {
                    this.manifest = new Manifest();
                }
                ViewModel.prototype.toggle = function (event) {
                    var self = this;
                    this.displayMessage(null);
                    var operationName = OperationName[$(event.target).prop("id")];
                    if ($(event.target).prop("checked"))
                        switch (operationName) {
                            case OperationName.DEDUPE_PHONE:
                            case OperationName.SET_PREF_PHONE:
                            case OperationName.SET_PREF_PHONE_SINGLE_COLUMN:
                                self.manifest.add($(event.target).prop("id"), function () {
                                    console.log("success");
                                    _.each(_.difference(_.pluck($("[name=phoneutil]"), "id"), [$(event.target).prop("id")]), function (id) {
                                        self.manifest.remove(id);
                                        $("#" + id).removeAttr("checked");
                                    });
                                }, function (e) {
                                    console.log("failure " + $(event.target).prop("id"));
                                    self.displayMessage(e.message);
                                    $("#" + $(event.target).prop("id")).removeAttr("checked");
                                });
                                break;
                            case OperationName.SET_PREF_ADDRESS_SINGLE_COLUMN:
                                self.manifest.add($(event.target).prop("id"), function () {
                                    console.log("success");
                                }, function (e) {
                                    console.log("failure " + $(event.target).prop("id"));
                                    self.displayMessage(e.message);
                                    $("#" + $(event.target).prop("id")).removeAttr("checked");
                                });
                                break;
                            case OperationName.SET_PREF_PHONE_COMPARE_INPUT:
                                self.manifest.add($(event.target).prop("id"), function () {
                                    console.log("success");
                                }, function (e) {
                                    console.log("failure " + $(event.target).prop("id"));
                                    self.displayMessage(e.message);
                                    $("#" + $(event.target).prop("id")).removeAttr("checked");
                                });
                                break;
                            case OperationName.SET_PREF_BASED_ON_VERIFICATION:
                                self.manifest.add($(event.target).prop("id"), function () {
                                    console.log("success");
                                }, function (e) {
                                    console.log("failure " + $(event.target).prop("id"));
                                    self.displayMessage(e.message);
                                    $("#" + $(event.target).prop("id")).removeAttr("checked");
                                });
                                break;
                            case OperationName.SET_PREF_EMAIL_VER:
                                self.manifest.add($(event.target).prop("id"), function () {
                                    console.log("success");
                                }, function (e) {
                                    console.log("failure " + $(event.target).prop("id"));
                                    self.displayMessage(e.message);
                                    $("#" + $(event.target).prop("id")).removeAttr("checked");
                                });
                                break;
                            default:
                                self.manifest.add($(event.target).prop("id"), null, function (e) {
                                    console.log("error adding operation " + $(event.target).prop("id"));
                                    self.displayMessage(e.message);
                                });
                                break;
                        }
                    else {
                        self.manifest.remove($(event.target).prop("id"));
                    }
                };
                ViewModel.prototype.submitUsingPredefinedManifest = function (event) {
                    var _this = this;
                    var url;
                    if ($(event.target).text() === "Download Manifest") {
                        url = "/Batch/DownloadManifest";
                    }
                    else {
                        url = "/Batch/DynamicAppend";
                    }
                    $.getJSON("/Batch/GetPredefinedManifest", { manifestName: $(event.target).prop("id") }).done(function (data) {
                        $("#form1").remove();
                        $("body").append($("<form action='" + url + "' method='POST' id='form1'>" +
                            "<input type='hidden' name='manifest' value='" + JSON.stringify(data) + "' />" +
                            "<input type='hidden' name='suppressionid' value='" + _this.manifest.supressionid() + "' />" +
                            "</form>"));
                        $("#form1").submit();
                    });
                };
                ViewModel.prototype.displayMessage = function (message) {
                    if (message)
                        $("#alert").removeAttr("class").addClass("alert alert-danger").text(message).show();
                    else
                        $("#alert").hide();
                };
                ViewModel.prototype.submit = function () {
                    var url = "/Batch/DynamicAppend";
                    $("#form1").remove();
                    $("body").append($("<form action='" + url + "' method='POST' id='form1'>" +
                        "<input type='hidden' name='manifest' value='" + this.manifest.toJson() + "' />" +
                        "<input type='hidden' name='suppressionid' value='" + this.manifest.supressionid() + "' />" +
                        "</form>"));
                    $("#form1").submit();
                };
                ViewModel.prototype.download = function () {
                    var url = "/Batch/DownloadManifest";
                    $("#form1").remove();
                    $("body").append($("<form action='" + url + "' method='POST' id='form1'>" +
                        "<input type='hidden' name='manifest' value='" + this.manifest.toJson() + "' />" +
                        "</form>"));
                    $("#form1").submit();
                };
                ViewModel.prototype.getButtonText = function () {
                    return $("#Category").val() === "DownloadManifest" ? "Download Manifest" : "Next";
                };
                ViewModel.prototype.nextClick = function () {
                    if ($("#Category").val() === "DownloadManifest")
                        buildManifestViewModel.download();
                    else
                        buildManifestViewModel.submit();
                };
                ViewModel.prototype.setSupressionId = function () {
                    $("#addSuppressionIdModelAlert").hide();
                    var suppressionid = $("#txtSupressionId").val().toLowerCase();
                    var regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
                    if (regex.exec(suppressionid) != null) {
                        console.log("suppression appears to be valid");
                        this.manifest.supressionid(suppressionid);
                        $("#addSuppressionIdModel").modal("hide");
                        return true;
                    }
                    else {
                        console.log("suppression appears to be invalid");
                        $("#addSuppressionIdModelAlert").text("The value you entered does not appear to a GUID.").show();
                    }
                };
                ViewModel.prototype.openSupressionModal = function () {
                    $("#addSuppressionIdModel").modal("show");
                };
                return ViewModel;
            }());
            BuildManifest.ViewModel = ViewModel;
        })(BuildManifest = DyanmicAppend.BuildManifest || (DyanmicAppend.BuildManifest = {}));
    })(DyanmicAppend = AccurateAppend.DyanmicAppend || (AccurateAppend.DyanmicAppend = {}));
})(AccurateAppend || (AccurateAppend = {}));
var buildManifestViewModel;
$(function () {
    buildManifestViewModel = new AccurateAppend.DyanmicAppend.BuildManifest.ViewModel();
    ko.applyBindings(buildManifestViewModel);
    $("#phoneAppendAccordion").collapse();
});
//# sourceMappingURL=data:application/json;base64,