<?xml version="1.0" encoding="utf-8" ?>
<castle>
 <properties>
  <aadb>ASPMembershipDB</aadb>
 </properties>
 
  <components>

   <!-- Reporting -->
   <component id="IDealMetricQuery" type="DomainModel.Queries.DealMetricQuery" lifestyle="transient">
    <parameters>
     <context>${Db Context}</context>
    </parameters>
    <forwardedTypes>
     <add service="DomainModel.Queries.IDealMetricQuery, DomainModel"/>
     <add service="DomainModel.Queries.IUserDealMetricQuery, DomainModel"/>
    </forwardedTypes>
   </component>

   <!-- Job Processing -->
    
    <component id="IChangeJobPriorityCommand" service="AccurateAppend.JobProcessing.DataAccess.IChangePriorityCommand, AccurateAppend.JobProcessing" type="DomainModel.Commands.ChangePriorityCommand" lifestyle="Transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>

    <!-- Security -->
    <component id="ILogonMustResetPasswordCommand" service="DomainModel.Commands.ILogonMustResetPasswordCommand, DomainModel" type="DomainModel.Commands.LogonMustResetPasswordCommand" lifestyle="Transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>

    <component id="IUserToGroupCommand" service="DomainModel.Commands.IUserToGroupCommand, DomainModel" type="DomainModel.Commands.UserToGroupCommand" lifestyle="Transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>

    <component id="IAcknowledgeAlertCommand" service="DomainModel.Commands.IAcknowledgeAlertCommand, DomainModel" type="DomainModel.Commands.AcknowledgeAlertCommand, DomainModel" lifestyle="Transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>
    
    <!-- Queries -->
    <component id="IChargeEventsQuery" service="DomainModel.Queries.IChargeEventsQuery, DomainModel" type="DomainModel.Queries.ChargeEventsQuery" lifestyle="transient">
      <parameters>
        <context>${Read Context}</context>
      </parameters>
    </component>

    <component id="IClientsViewQuery" service="DomainModel.Queries.IClientsViewQuery, DomainModel" type="DomainModel.Queries.ClientsViewQuery" lifestyle="transient">
      <parameters>
        <context>${Read Context}</context>
      </parameters>
    </component>

    <component id="IClientsViewQuery" service="DomainModel.Queries.IClientsViewQuery, DomainModel" type="DomainModel.Queries.ClientsViewQuery" lifestyle="transient">
      <parameters>
        <context>${Read Context}</context>
      </parameters>
    </component>

    <component id="ILeadsViewQuery" service="DomainModel.Queries.ILeadsViewQuery, DomainModel" type="DomainModel.Queries.LeadsViewQuery" lifestyle="transient">
      <parameters>
        <context>${Read Context}</context>
      </parameters>
    </component>

    <component id="IBatchUsageQuery" service="DomainModel.Queries.IBatchUsageQuery, DomainModel" type="DomainModel.Queries.BatchUsageQuery" lifestyle="transient">
      <parameters>
        <context>${Read Context}</context>
      </parameters>
    </component>

    <component id="ILeadReportingQuery" service="DomainModel.Queries.ILeadReportingQuery, DomainModel" type="DomainModel.Queries.LeadReportingQuery" lifestyle="transient">
      <parameters>
        <context>${Read Context}</context>
      </parameters>
    </component>

    <component id="INationBuilderPushViewQuery" service="DomainModel.Queries.INationBuilderPushViewQuery, DomainModel" type="DomainModel.Queries.NationBuilderPushViewQuery" lifestyle="transient">
      <parameters>
        <context>${Read Context}</context>
      </parameters>
    </component>

    <component id="IClientsViewQuery" service="DomainModel.Queries.IClientsViewQuery, DomainModel" type="DomainModel.Queries.ClientsViewQuery" lifestyle="transient">
      <parameters>
        <context>${Read Context}</context>
      </parameters>
    </component>

    <component id="IOperatingMetricQuery" service="DomainModel.Queries.IOperatingMetricQuery, DomainModel" type="DomainModel.Queries.OperatingMetricQuery" lifestyle="transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>

    <component id="IOperationReportMetricQuery" service="DomainModel.Queries.IOperationReportMetricQuery, DomainModel" type="DomainModel.Queries.OperationReportMetricQuery" lifestyle="transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>

    <component id="ILeadMetricQuery" service="DomainModel.Queries.ILeadMetricQuery, DomainModel" type="DomainModel.Queries.LeadMetricQuery" lifestyle="transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>

    <component id="IJobQueueQuery" service="DomainModel.Queries.IJobQueueQuery, DomainModel" type="DomainModel.Queries.JobQueueQuery" lifestyle="transient">
      <parameters>
        <context>${Read Context}</context>
      </parameters>
    </component>

    <component id="IJobQueueMetricsQuery" service="DomainModel.Queries.IJobQueueMetricsQuery, DomainModel" type="DomainModel.Queries.JobQueueMetricsQuery" lifestyle="transient">
      <parameters>
        <context>${Read Context}</context>
      </parameters>
    </component>

    <component id="IAlertsQuery" service="DomainModel.Queries.IAlertsQuery, DomainModel" type="DomainModel.Queries.AlertsQuery, DomainModel" lifestyle="Transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>

    <component id="IUserProcessingMetricQuery" service="DomainModel.Queries.IUserProcessingMetricQuery, DomainModel" type="DomainModel.Queries.UserProcessingMetricQuery" lifestyle="transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>

    <component id="IAdminUserActivityMetricQuery" service="DomainModel.Queries.IAdminUserActivityMetricQuery, DomainModel" type="DomainModel.Queries.AdminUserActivityMetricQuery" lifestyle="transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>

    <component id="IMrrMetricQuery" service="DomainModel.Queries.IMrrMetricQuery, DomainModel" type="DomainModel.Queries.MrrMetricQuery" lifestyle="transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>

    <component id="IAgentMetricQuery" service="DomainModel.Queries.IAgentMetricQuery, DomainModel" type="DomainModel.Queries.AgentMetricQuery" lifestyle="transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>

    <component id="ILeadChannelMetricQuery" service="DomainModel.Queries.ILeadChannelMetricQuery, DomainModel" type="DomainModel.Queries.LeadChannelMetricQuery" lifestyle="transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>

    <component id="IUserOperatingMetricQuery" service="DomainModel.Queries.IUserOperatingMetricQuery, DomainModel" type="DomainModel.Queries.UserOperatingMetricQuery" lifestyle="transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>

    <component id="IApiTrailMetricsQuery" service="DomainModel.Queries.IApiTrailMetricsQuery, DomainModel" type="DomainModel.Queries.ApiTrialMetricsQuery" lifestyle="transient">
      <parameters>
        <context>${Db Context}</context>
      </parameters>
    </component>
    
  </components>
</castle>
