var requiredFields;
var FieldName_Unknown;
$(document).ready(function () {
    $("select.ct").bind("change", function () {
        $("#message").hide();
        if ($(this).val() === "Reset") {
            console.log("Reseting control");
            reset(this);
            updateRequiredFieldsDisplay();
            return;
        }
        set(this);
        updateRequiredFieldsDisplay();
    });
    $("a[name=next]").bind("click", function () {
        submit();
    });
    initialize();
    updateRequiredFieldsDisplay();
});
var globalOptions = new Array();
function submit() {
    if (validate()) {
        var columnMap = "";
        $.each($("#mappings select"), function (i, v) {
            if (v.value === "") {
                columnMap += FieldName_Unknown + ";";
            }
            else {
                columnMap += v.value + ";";
            }
        });
        orderModel.order.columnMap = columnMap;
        console.log(orderModel.order.columnMap);
        $("<input>").attr({
            type: "hidden",
            name: "orderModel",
            value: ko.toJSON(orderModel.order)
        }).appendTo("form").first();
        $("form").first().submit();
        return true;
    }
    return false;
}
function updateRequiredFieldsDisplay() {
    var remainingRequiredFields = $.grep(requiredFields, function (f) { return $.inArray(f, globalOptions) > -1; });
    if (remainingRequiredFields.length === 0) {
    }
    else {
        $("#alert").removeClass().addClass("alert alert-danger").text("Please identify the following columns in your file in the form below: " + requiredFieldsToReadable(requiredFields) + ".").show();
        $("button[name=next]").prop("disabled", true);
    }
}
function initialize() {
    $("select.ct:first").find("option").each(function () {
        addGlobalOption($(this).val());
    });
    if ($.inArray("FirstName", globalOptions) >= 0 && $.inArray("LastName", globalOptions) >= 0) {
        addGlobalOption("FullName");
        resetOptionsForUnSelected();
    }
}
function arrayIntersect(a, b) {
    return $.grep(a, function (i) { return $.inArray(i, b) > -1; });
}
;
function validate() {
    if (arrayIntersect(globalOptions, requiredFields).length > 0) {
        $("#alert").removeClass().addClass("alert alert-danger").text("Please identify the following columns in your file in the form below: " + requiredFieldsToReadable(requiredFields) + ".").show();
        return false;
    }
    return true;
}
function set(c) {
    console.log("setSelect()");
    removeGlobalOption($(c).val());
    var selectedOption = $(c).find(":selected");
    if (selectedOption.val() === "FirstName" || selectedOption.val() === "LastName") {
        removeGlobalOption("FullName");
    }
    else if (selectedOption.val() === "FullName") {
        removeGlobalOption("FirstName");
        removeGlobalOption("LastName");
    }
    else if (selectedOption.val() === "PostalCode") {
        removeRequiredOption("City");
        removeRequiredOption("State");
    }
    else if (selectedOption.val() === "City") {
        if (!containsGlobalOption("State"))
            removeRequiredOption("PostalCode");
    }
    else if (selectedOption.val() === "State") {
        if (!containsGlobalOption("City"))
            removeRequiredOption("PostalCode");
    }
    $(c).find("option").remove();
    $(c).append(selectedOption);
    $(c).append(buildOptionTag("Reset"));
    $.each(getUnselected(), function () {
        console.log("Looping through UnSelected controls");
        $(this).find("option").remove();
        $(this).append(buildGlobalOptions());
    });
    $(c).addClass("selected");
}
function reset(c) {
    var selectedOption = $(c).find("[value!='Reset']").val();
    addGlobalOption(selectedOption);
    resetOptionsForSelect(c);
    $(c).removeClass("selected");
    switch (selectedOption) {
        case "FullName":
            addGlobalOption("FirstName");
            addGlobalOption("LastName");
            break;
        case "FirstName":
            if (containsGlobalOption("LastName"))
                addGlobalOption("FullName");
            break;
        case "LastName":
            if (containsGlobalOption("FirstName"))
                addGlobalOption("FullName");
            break;
        case "PostalCode":
            if (!containsRequiredOption("State"))
                addRequiredOption("State");
            if (!containsRequiredOption("City"))
                addRequiredOption("City");
            break;
        case "State":
        case "City":
            if (containsGlobalOption("PostalCode"))
                addRequiredOption("PostalCode");
            break;
    }
    resetOptionsForUnSelected();
}
function getUnselected() {
    var arr = [];
    $("select.ct").each(function () {
        if ($(this).find("option:selected[value='']").length > 0) {
            arr.push(this);
        }
    });
    return arr;
}
function getSelectedValues() {
    var arr = [];
    $("select.ct").each(function () {
        if ($(this).find("option:selected[value!=='']").length > 0) {
            arr.push($(this).val());
        }
    });
    return arr;
}
function resetOptionsForSelect(c) {
    $(c).find("option").remove();
    $(c).append(buildGlobalOptions());
    jcf.replaceAll();
}
function resetOptionsForUnSelected() {
    $(getUnselected()).each(function () {
        resetOptionsForSelect(this);
        jcf.replaceAll();
    });
}
function buildGlobalOptions() {
    console.log("Building global options");
    var arr = new Array();
    $.each(globalOptions, function () {
        arr.push(buildOptionTag(this));
    });
    return arr;
}
function buildOptionTag(value) {
    console.log("Building option for '" + value + "'");
    if (value.toString() === "") {
        console.log("Building empty option");
        return $("<option></option>").attr("value", "").text("-- Select Column -");
    }
    else {
        return $("<option></option>").attr("value", value).text(value);
    }
}
function addGlobalOption(value) {
    var isPresent = false;
    $.each(globalOptions, function () {
        if (this.toString() === value)
            isPresent = true;
    });
    if (isPresent)
        return;
    globalOptions.push(value);
}
function removeGlobalOption(value) {
    globalOptions = jQuery.grep(globalOptions, function (toRemove) { return toRemove !== value; });
}
function addRequiredOption(value) {
    var isPresent = false;
    $.each(requiredFields, function () {
        if (this.toString() === value)
            isPresent = true;
    });
    if (isPresent)
        return;
    requiredFields.push(value);
}
function removeRequiredOption(value) {
    requiredFields = jQuery.grep(requiredFields, function (toRemove) { return toRemove !== value; });
}
function containsGlobalOption(value) {
    var present = false;
    $.each(globalOptions, function () {
        if (this.toString() === value)
            present = true;
    });
    return present;
}
function containsRequiredOption(value) {
    var present = false;
    $.each(requiredFields, function () {
        if (this.toString() === value)
            present = true;
    });
    return present;
}
function requiredFieldsToReadable(requiredFields) {
    var readable = "";
    $.each(requiredFields, function (i, v) {
        readable += getDisplayTextForField(v) + (i < requiredFields.length - 1 ? ", " : "");
    });
    return readable.trim();
}
function getDisplayTextForField(field) {
    switch (field) {
        case "FirstName":
            return "First Name";
        case "LastName":
            return "Last Name";
        case "StreetAddress":
            return "Street Address";
        case "PostalCode":
            return "Postal Code";
    }
    return field;
}
//# sourceMappingURL=data:application/json;base64,