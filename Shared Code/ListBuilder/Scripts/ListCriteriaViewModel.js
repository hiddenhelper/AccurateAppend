var AccurateAppend;
(function (AccurateAppend) {
    var ListBuilder;
    (function (ListBuilder) {
        var ListCriteriaViewModel = (function () {
            function ListCriteriaViewModel(urls, requestid) {
                var _this = this;
                this.urls = urls;
                this.addExactAge = function (data, event) {
                    console.log("addExactAge called");
                    var target = event.target || event.srcElement;
                    var taregtValue = $(target.parentNode).find("#exactAge").val();
                    $(target.parentNode).find("#alertMessage").remove();
                    if (taregtValue < 18) {
                        $(target.parentNode)
                            .append("<div style='color: red; margin-top: 15px;' id=\"alertMessage\">Age must be 18 or older.</div>");
                        return false;
                    }
                    if (ko.utils.arrayFirst(viewModel1.listCriteriaViewModel.exactAges(), function (item) { return item.name === taregtValue; })) {
                        $(target.parentNode)
                            .append("<div style='color: red; margin-top: 15px;' id=\"alertMessage\">The exact age " + taregtValue + " has already been added.</div>");
                        return false;
                    }
                    _this.exactAges.push(new ListBuilder.ValueLabel(taregtValue, taregtValue + " years old"));
                    $(target.parentNode).find("#exactAge").val("");
                    _this.updateCount();
                };
                this.addDobRange = function (data, event) {
                    var target = event.target || event.srcElement;
                    $(target.parentNode).find("#alertMessage").remove();
                    var dobStart = new ListBuilder.Dob($(target.parentNode).find("#dob_start").val());
                    var dobEnd = new ListBuilder.Dob($(target.parentNode).find("#dob_end").val());
                    var dobRange = new ListBuilder.DobRange(dobStart, dobEnd);
                    var validation = dobRange.isValid();
                    if (!validation.result) {
                        $(target.parentNode).append("<div style='color: red; margin-top: 15px;' id=\"alertMessage\">" + validation.message + "</div>");
                        return false;
                    }
                    if (ko.utils.arrayFirst(viewModel1.listCriteriaViewModel.dobRanges(), function (item) { return item.toString() === dobRange.toString(); })) {
                        $(target.parentNode)
                            .append("<div style='color: red; margin-top: 15px;' id=\"alertMessage\">The dob range " + dobRange.toString() + " has already been added.</div>");
                        return false;
                    }
                    _this.dobRanges.push(new ListBuilder.DobRange(dobStart, dobEnd));
                    $(target.parentNode).find("#dob_start").val("");
                    $(target.parentNode).find("#dob_end").val("");
                    _this.updateCount();
                };
                this.addZips = function (event, vm) {
                    var target = event.target || event.srcElement;
                    var lines = $(event.target).val().split("\n");
                    var _loop_1 = function (i) {
                        var inputZip = lines[i].trim();
                        if (/^\d{5}$|^\d{5}$/.test(inputZip)) {
                            if (jQuery.grep(_this.zips(), function (a) { return a.name === inputZip; }).length === 0)
                                _this.zips.push(new ListBuilder.Zip(inputZip, new ListBuilder.State("", 0)));
                            return "continue";
                        }
                    };
                    for (var i = 0; i < lines.length; i++) {
                        _loop_1(i);
                    }
                    if (_this.zips().length === 0) {
                        $(target.parentNode)
                            .append("<div style='color: red; margin-top: 15px;' id=\"alertMessage\">Zips seems to be empty.</div>");
                        return false;
                    }
                    _this.updateCount();
                };
                this.requestId = ko.observable(requestid);
                this.count = ko.observable(0);
                this.states = ko.observableArray([]);
                this.counties = ko.observableArray([]);
                this.zips = ko.observableArray([]);
                this.cities = ko.observableArray([]);
                this.timeZones = ko.observableArray([]);
                this.ageRanges = ko.observableArray([]);
                this.exactAges = ko.observableArray([]);
                this.dobRanges = ko.observableArray([]);
                this.gender = ko.observableArray([]);
                this.maritalStatus = ko.observableArray([]);
                this.languages = ko.observableArray([]);
                this.hoh = ko.observableArray([]);
                this.estIncome = ko.observableArray([]);
                this.netWorth = ko.observableArray([]);
                this.homeValue = ko.observableArray([]);
                this.ownRent = ko.observableArray([]);
                this.investmentEstimatedResidentialPropertiesOwned = ko.observableArray([]);
                this.lengthOfResidence = ko.observableArray([]);
                this.numberOfAdults = ko.observableArray([]);
                this.ageRangesMale = ko.observableArray([]);
                this.ageRangesFemale = ko.observableArray([]);
                this.ageRangesUnknown = ko.observableArray([]);
                this.investments = ko.observableArray([]);
                this.businessOwner = ko.observableArray([]);
                this.education = ko.observableArray([]);
                this.occupationGeneral = ko.observableArray([]);
                this.occupationDetailed = ko.observableArray([]);
                this.donates = ko.observableArray([]);
                this.interestsPurchases = ko.observableArray([]);
                this.interestsReadingGeneral = ko.observableArray([]);
                this.interestsReadingMagazinesAndSubscriptions = ko.observableArray([]);
                this.interestsSports = ko.observableArray([]);
                this.interestsFitness = ko.observableArray([]);
                this.interestsOutdoors = ko.observableArray([]);
            }
            ListCriteriaViewModel.prototype.data = function () {
                return {
                    requestId: this.requestId,
                    states: this.states,
                    counties: this.counties,
                    zips: this.zips,
                    cities: this.cities,
                    timeZones: this.timeZones,
                    ageRanges: this.ageRanges,
                    exactAges: this.exactAges,
                    dobRanges: this.dobRanges,
                    gender: this.gender,
                    maritalStatus: this.maritalStatus,
                    languages: this.languages,
                    hoh: this.hoh,
                    estIncome: this.estIncome,
                    netWorth: this.netWorth,
                    homeValue: this.homeValue,
                    ownRent: this.ownRent,
                    investmentEstimatedResidentialPropertiesOwned: this.investmentEstimatedResidentialPropertiesOwned,
                    lengthOfResidence: this.lengthOfResidence,
                    numberOfAdults: this.numberOfAdults,
                    ageRangesMale: this.ageRangesMale,
                    ageRangesFemale: this.ageRangesFemale,
                    ageRangesUnknown: this.ageRangesUnknown,
                    investments: this.investments,
                    businessOwner: this.businessOwner,
                    education: this.education,
                    occupationGeneral: this.occupationGeneral,
                    occupationDetailed: this.occupationDetailed,
                    donates: this.donates,
                    interestsPurchases: this.interestsPurchases,
                    interestsReadingGeneral: this.interestsReadingGeneral,
                    interestsReadingMagazinesAndSubscriptions: this.interestsReadingMagazinesAndSubscriptions,
                    interestsSports: this.interestsSports,
                    interestsFitness: this.interestsFitness,
                    interestsOutdoors: this.interestsOutdoors
                };
            };
            ListCriteriaViewModel.prototype.toggle = function (e) {
                var name = e.currentTarget.name;
                var coll = this[name];
                var obj;
                switch (e.currentTarget.type) {
                    case "select-one":
                        var value = $(e.currentTarget).find("option:selected").val();
                        coll.removeAll();
                        if (value) {
                            obj = JSON.parse(value);
                            coll.removeAll();
                            coll.push(obj);
                        }
                        break;
                    default:
                        obj = JSON.parse(e.currentTarget.value);
                        if (e.currentTarget.checked) {
                            coll.push(obj);
                        }
                        else {
                            coll.remove(function (item) { return item.id === obj.id; });
                            $(e.view.document).find("#" + obj.id).prop("checked", false);
                            $(e.view.document).find("[name=" + name + "] option[value=\"\"]").prop("selected", true);
                        }
                        break;
                }
                this.updateCount();
            };
            ListCriteriaViewModel.prototype.removeAllItems = function () {
                this.count(0);
            };
            ListCriteriaViewModel.prototype.updateCount = function () {
                console.log("updateCount called");
                var self = this;
                console.log(ko.toJSON(this.data()));
                $("#updateCountLoading").show();
                $.ajax({
                    type: "POST",
                    url: this.getUrl("GenerateListCount"),
                    data: { listCriteria: ko.toJSON(this.data()) },
                    success: function (response) {
                        console.log(ko.toJSON(response));
                        if (response.HttpStatusCodeResult === 200) {
                            self.count(response.Count);
                        }
                        else if (response.HttpStatusCodeResult === 400) {
                            self.count(response.Count);
                        }
                        else {
                            self.count(response.Count);
                        }
                        $("#updateCountLoading").hide();
                    }
                });
                return true;
            };
            ListCriteriaViewModel.prototype.getUrl = function (urlName) {
                var match = jQuery.grep(this.urls, function (n) { return n.name === urlName; });
                return match[0].url;
            };
            return ListCriteriaViewModel;
        }());
        ListBuilder.ListCriteriaViewModel = ListCriteriaViewModel;
    })(ListBuilder = AccurateAppend.ListBuilder || (AccurateAppend.ListBuilder = {}));
})(AccurateAppend || (AccurateAppend = {}));
//# sourceMappingURL=data:application/json;base64,